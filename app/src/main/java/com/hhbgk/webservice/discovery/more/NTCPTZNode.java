package com.hhbgk.webservice.discovery.more;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.0.8.0
//
// Created by Quasar Development at 04/04/2017
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;
import java.util.ArrayList;
import org.ksoap2.serialization.PropertyInfo;

public class NTCPTZNode extends NTCDeviceEntity implements KvmSerializable
{

    
    public String Name;
    
    public NTCPTZSpaces SupportedPTZSpaces;
    
    public Integer MaximumNumberOfPresets=0;
    
    public Boolean HomeSupported=false;
    
    public ArrayList< String> AuxiliaryCommands =new ArrayList<String >();
    
    public NTCPTZNodeExtension Extension;
    
    public Boolean FixedHomePosition=false;

    public NTCPTZNode ()
    {
    }

    public NTCPTZNode (Object paramObj,NTCExtendedSoapSerializationEnvelope __envelope)
    {
	    super(paramObj, __envelope);
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        if(inObj instanceof SoapObject)
        {
            SoapObject soapObject=(SoapObject)inObj;
            int size = soapObject.getPropertyCount();
            for (int i0=0;i0< size;i0++)
            {
                //if you have compilation error here, please use a ksoap2.jar and ExKsoap2.jar from libs folder (in the generated zip file)
                PropertyInfo info=soapObject.getPropertyInfo(i0);
                Object obj = info.getValue();
                if (info.name.equals("Name"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.Name = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.Name = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("SupportedPTZSpaces"))
                {
                    if(obj!=null)
                    {
                        Object j = obj;
                        this.SupportedPTZSpaces = (NTCPTZSpaces)__envelope.get(j,NTCPTZSpaces.class,false);
                    }
                    continue;
                }
                if (info.name.equals("MaximumNumberOfPresets"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.MaximumNumberOfPresets = Integer.parseInt(j.toString());
                            }
                        }
                        else if (obj instanceof Integer){
                            this.MaximumNumberOfPresets = (Integer)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("HomeSupported"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.HomeSupported = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.HomeSupported = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("AuxiliaryCommands"))
                {
                    if(obj!=null)
                    {
        
                    
                        if(this.AuxiliaryCommands==null)
                        {
                            this.AuxiliaryCommands = new ArrayList< String>();
                        }
                        Object j =obj;
                        String j1= j.toString();
                        this.AuxiliaryCommands.add(j1);
                   
        
                    }
                    continue;
                }
                if (info.name.equals("Extension"))
                {
                    if(obj!=null)
                    {
                        Object j = obj;
                        this.Extension = (NTCPTZNodeExtension)__envelope.get(j,NTCPTZNodeExtension.class,false);
                    }
                    continue;
                }

            }

        }



        if (inObj.hasAttribute("FixedHomePosition"))
        {	
            Object j = inObj.getAttribute("FixedHomePosition");
            if (j != null)
            {
                FixedHomePosition = new Boolean(j.toString());
	            
            }
        }

    }

    @Override
    public Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return this.Name!=null?this.Name:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+1)
        {
            return SupportedPTZSpaces;
        }
        if(propertyIndex==count+2)
        {
            return MaximumNumberOfPresets;
        }
        if(propertyIndex==count+3)
        {
            return HomeSupported;
        }
        if(propertyIndex>=count+4 && propertyIndex < count+4+this.AuxiliaryCommands.size())
        {
            return this.AuxiliaryCommands.get(propertyIndex-(count+4));
        }
        if(propertyIndex==count+4+this.AuxiliaryCommands.size())
        {
            return this.Extension!=null?this.Extension:SoapPrimitive.NullSkip;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+5+AuxiliaryCommands.size();
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "Name";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+1)
        {
            info.type = NTCPTZSpaces.class;
            info.name = "SupportedPTZSpaces";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+2)
        {
            info.type = PropertyInfo.INTEGER_CLASS;
            info.name = "MaximumNumberOfPresets";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+3)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "HomeSupported";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex>=count+4 && propertyIndex < count+4+this.AuxiliaryCommands.size())
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "AuxiliaryCommands";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+4+this.AuxiliaryCommands.size())
        {
            info.type = NTCPTZNodeExtension.class;
            info.name = "Extension";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }
    
    @Override
    public void setProperty(int arg0, Object arg1)
    {
    }



    @Override
    public int getAttributeCount() {
        return super.getAttributeCount() + 1;
    }
    
    @Override
    public void getAttributeInfo(int index, AttributeInfo info) {
        int count=super.getAttributeCount();
        if(index==count+0)
        {
            info.name = "FixedHomePosition";
            info.namespace= "";
            if(this.FixedHomePosition!=null)
            {
                info.setValue(this.FixedHomePosition);
            }
            
        }
        if(index < count)
        {
            super.getAttributeInfo(index, info);
        }
    }

    @Override
    public void getAttribute(int i, AttributeInfo attributeInfo) {

    }

    @Override
    public void setAttribute(AttributeInfo attributeInfo) {

    }    
}

