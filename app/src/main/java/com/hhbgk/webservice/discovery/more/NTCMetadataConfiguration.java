package com.hhbgk.webservice.discovery.more;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.0.8.0
//
// Created by Quasar Development at 04/04/2017
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;

public class NTCMetadataConfiguration extends NTCConfigurationEntity implements KvmSerializable
{

    
    public NTCPTZFilter PTZStatus;
    
    public NTCEventSubscription Events;
    
    public Boolean Analytics;
    
    public NTCMulticastConfiguration Multicast;
    
    public String SessionTimeout;
    
    public NTCAnalyticsEngineConfiguration AnalyticsEngineConfiguration;
    
    public NTCMetadataConfigurationExtension Extension;
    
    public String CompressionType;

    public NTCMetadataConfiguration ()
    {
    }

    public NTCMetadataConfiguration (Object paramObj,NTCExtendedSoapSerializationEnvelope __envelope)
    {
	    super(paramObj, __envelope);
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        if(inObj instanceof SoapObject)
        {
            SoapObject soapObject=(SoapObject)inObj;
            int size = soapObject.getPropertyCount();
            for (int i0=0;i0< size;i0++)
            {
                //if you have compilation error here, please use a ksoap2.jar and ExKsoap2.jar from libs folder (in the generated zip file)
                PropertyInfo info=soapObject.getPropertyInfo(i0);
                Object obj = info.getValue();
                if (info.name.equals("PTZStatus"))
                {
                    if(obj!=null)
                    {
                        Object j = obj;
                        this.PTZStatus = (NTCPTZFilter)__envelope.get(j,NTCPTZFilter.class,false);
                    }
                    continue;
                }
                if (info.name.equals("Events"))
                {
                    if(obj!=null)
                    {
                        Object j = obj;
                        this.Events = (NTCEventSubscription)__envelope.get(j,NTCEventSubscription.class,false);
                    }
                    continue;
                }
                if (info.name.equals("Analytics"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.Analytics = new Boolean(j.toString());
                            }
                        }
                        else if (obj instanceof Boolean){
                            this.Analytics = (Boolean)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("Multicast"))
                {
                    if(obj!=null)
                    {
                        Object j = obj;
                        this.Multicast = (NTCMulticastConfiguration)__envelope.get(j,NTCMulticastConfiguration.class,false);
                    }
                    continue;
                }
                if (info.name.equals("SessionTimeout"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.SessionTimeout = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.SessionTimeout = (String)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("AnalyticsEngineConfiguration"))
                {
                    if(obj!=null)
                    {
                        Object j = obj;
                        this.AnalyticsEngineConfiguration = (NTCAnalyticsEngineConfiguration)__envelope.get(j,NTCAnalyticsEngineConfiguration.class,false);
                    }
                    continue;
                }
                if (info.name.equals("Extension"))
                {
                    if(obj!=null)
                    {
                        Object j = obj;
                        this.Extension = (NTCMetadataConfigurationExtension)__envelope.get(j,NTCMetadataConfigurationExtension.class,false);
                    }
                    continue;
                }

            }

        }



        if (inObj.hasAttribute("CompressionType"))
        {	
            Object j = inObj.getAttribute("CompressionType");
            if (j != null)
            {
                CompressionType = j.toString();
	            
            }
        }

    }

    @Override
    public Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return this.PTZStatus!=null?this.PTZStatus:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+1)
        {
            return this.Events!=null?this.Events:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+2)
        {
            return this.Analytics!=null?this.Analytics:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+3)
        {
            return Multicast;
        }
        if(propertyIndex==count+4)
        {
            return SessionTimeout;
        }
        if(propertyIndex==count+5)
        {
            return this.AnalyticsEngineConfiguration!=null?this.AnalyticsEngineConfiguration:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+6)
        {
            return this.Extension!=null?this.Extension:SoapPrimitive.NullSkip;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+7;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = NTCPTZFilter.class;
            info.name = "PTZStatus";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+1)
        {
            info.type = NTCEventSubscription.class;
            info.name = "Events";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+2)
        {
            info.type = PropertyInfo.BOOLEAN_CLASS;
            info.name = "Analytics";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+3)
        {
            info.type = NTCMulticastConfiguration.class;
            info.name = "Multicast";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+4)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "SessionTimeout";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+5)
        {
            info.type = NTCAnalyticsEngineConfiguration.class;
            info.name = "AnalyticsEngineConfiguration";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+6)
        {
            info.type = NTCMetadataConfigurationExtension.class;
            info.name = "Extension";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }
    
    @Override
    public void setProperty(int arg0, Object arg1)
    {
    }



    @Override
    public int getAttributeCount() {
        return super.getAttributeCount() + 1;
    }
    
    @Override
    public void getAttributeInfo(int index, AttributeInfo info) {
        int count=super.getAttributeCount();
        if(index==count+0)
        {
            info.name = "CompressionType";
            info.namespace= "";
            if(this.CompressionType!=null)
            {
                info.setValue(this.CompressionType);
            }
            
        }
        if(index < count)
        {
            super.getAttributeInfo(index, info);
        }
    }

    @Override
    public void getAttribute(int i, AttributeInfo attributeInfo) {

    }

    @Override
    public void setAttribute(AttributeInfo attributeInfo) {

    }    
}

