package com.hhbgk.webservice.discovery.more;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.0.8.0
//
// Created by Quasar Development at 04/04/2017
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;
import java.util.ArrayList;
import org.ksoap2.serialization.PropertyInfo;

public class NTCLensDescription extends AttributeContainer implements KvmSerializable
{

    
    public NTCLensOffset Offset;
    
    public ArrayList< NTCLensProjection> Projection =new ArrayList<NTCLensProjection >();
    
    public Float XFactor=0f;
    
    public Float FocalLength=0f;

    public NTCLensDescription ()
    {
    }

    public NTCLensDescription (Object paramObj,NTCExtendedSoapSerializationEnvelope __envelope)
    {
	    
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        if(inObj instanceof SoapObject)
        {
            SoapObject soapObject=(SoapObject)inObj;
            int size = soapObject.getPropertyCount();
            for (int i0=0;i0< size;i0++)
            {
                //if you have compilation error here, please use a ksoap2.jar and ExKsoap2.jar from libs folder (in the generated zip file)
                PropertyInfo info=soapObject.getPropertyInfo(i0);
                Object obj = info.getValue();
                if (info.name.equals("Offset"))
                {
                    if(obj!=null)
                    {
                        Object j = obj;
                        this.Offset = (NTCLensOffset)__envelope.get(j,NTCLensOffset.class,false);
                    }
                    continue;
                }
                if (info.name.equals("Projection"))
                {
                    if(obj!=null)
                    {
        
                    
                        if(this.Projection==null)
                        {
                            this.Projection = new ArrayList< NTCLensProjection>();
                        }
                        Object j =obj;
                        NTCLensProjection j1= (NTCLensProjection)__envelope.get(j,NTCLensProjection.class,false);
                        this.Projection.add(j1);
                   
        
                    }
                    continue;
                }
                if (info.name.equals("XFactor"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.XFactor = new Float(j.toString());
                            }
                        }
                        else if (obj instanceof Float){
                            this.XFactor = (Float)obj;
                        }
                    }
                    continue;
                }

            }

        }



        if (inObj.hasAttribute("FocalLength"))
        {	
            Object j = inObj.getAttribute("FocalLength");
            if (j != null)
            {
                FocalLength = new Float(j.toString());
	            
            }
        }

    }

    @Override
    public Object getProperty(int propertyIndex) {
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==0)
        {
            return Offset;
        }
        if(propertyIndex>=1 && propertyIndex < 1+this.Projection.size())
        {
            return this.Projection.get(propertyIndex-(1));
        }
        if(propertyIndex==1+this.Projection.size())
        {
            return XFactor;
        }
        return null;
    }


    @Override
    public int getPropertyCount() {
        return 2+Projection.size();
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        if(propertyIndex==0)
        {
            info.type = NTCLensOffset.class;
            info.name = "Offset";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex>=1 && propertyIndex < 1+this.Projection.size())
        {
            info.type = NTCLensProjection.class;
            info.name = "Projection";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==1+this.Projection.size())
        {
            info.type = Float.class;
            info.name = "XFactor";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1)
    {
    }



    @Override
    public int getAttributeCount() {
        return 1;
    }
    
    @Override
    public void getAttributeInfo(int index, AttributeInfo info) {
        if(index==0)
        {
            info.name = "FocalLength";
            info.namespace= "";
            if(this.FocalLength!=null)
            {
                info.setValue(this.FocalLength);
            }
            
        }
    }

    @Override
    public void getAttribute(int i, AttributeInfo attributeInfo) {

    }

    @Override
    public void setAttribute(AttributeInfo attributeInfo) {

    }    
}

