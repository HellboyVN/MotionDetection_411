package com.hhbgk.webservice.discovery.more;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.0.8.0
//
// Created by Quasar Development at 04/04/2017
//
//---------------------------------------------------


import java.util.Hashtable;
import org.ksoap2.serialization.*;

public class NTCVideoEncoderConfiguration extends NTCConfigurationEntity implements KvmSerializable
{

    
    public NTCEnums.VideoEncoding Encoding=NTCEnums.VideoEncoding.JPEG;
    
    public NTCVideoResolution Resolution;
    
    public Float Quality=0f;
    
    public NTCVideoRateControl RateControl;
    
    public NTCMpeg4Configuration MPEG4;
    
    public NTCH264Configuration H264;
    
    public NTCMulticastConfiguration Multicast;
    
    public String SessionTimeout;

    public NTCVideoEncoderConfiguration ()
    {
    }

    public NTCVideoEncoderConfiguration (Object paramObj,NTCExtendedSoapSerializationEnvelope __envelope)
    {
	    super(paramObj, __envelope);
	    if (paramObj == null)
            return;
        AttributeContainer inObj=(AttributeContainer)paramObj;


        if(inObj instanceof SoapObject)
        {
            SoapObject soapObject=(SoapObject)inObj;
            int size = soapObject.getPropertyCount();
            for (int i0=0;i0< size;i0++)
            {
                //if you have compilation error here, please use a ksoap2.jar and ExKsoap2.jar from libs folder (in the generated zip file)
                PropertyInfo info=soapObject.getPropertyInfo(i0);
                Object obj = info.getValue();
                if (info.name.equals("Encoding"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.Encoding = NTCEnums.VideoEncoding.fromString(j.toString());
                            }
                        }
                        else if (obj instanceof NTCEnums.VideoEncoding){
                            this.Encoding = (NTCEnums.VideoEncoding)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("Resolution"))
                {
                    if(obj!=null)
                    {
                        Object j = obj;
                        this.Resolution = (NTCVideoResolution)__envelope.get(j,NTCVideoResolution.class,false);
                    }
                    continue;
                }
                if (info.name.equals("Quality"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.Quality = new Float(j.toString());
                            }
                        }
                        else if (obj instanceof Float){
                            this.Quality = (Float)obj;
                        }
                    }
                    continue;
                }
                if (info.name.equals("RateControl"))
                {
                    if(obj!=null)
                    {
                        Object j = obj;
                        this.RateControl = (NTCVideoRateControl)__envelope.get(j,NTCVideoRateControl.class,false);
                    }
                    continue;
                }
                if (info.name.equals("MPEG4"))
                {
                    if(obj!=null)
                    {
                        Object j = obj;
                        this.MPEG4 = (NTCMpeg4Configuration)__envelope.get(j,NTCMpeg4Configuration.class,false);
                    }
                    continue;
                }
                if (info.name.equals("H264"))
                {
                    if(obj!=null)
                    {
                        Object j = obj;
                        this.H264 = (NTCH264Configuration)__envelope.get(j,NTCH264Configuration.class,false);
                    }
                    continue;
                }
                if (info.name.equals("Multicast"))
                {
                    if(obj!=null)
                    {
                        Object j = obj;
                        this.Multicast = (NTCMulticastConfiguration)__envelope.get(j,NTCMulticastConfiguration.class,false);
                    }
                    continue;
                }
                if (info.name.equals("SessionTimeout"))
                {
                    if(obj!=null)
                    {
        
                        if (obj.getClass().equals(SoapPrimitive.class))
                        {
                            SoapPrimitive j =(SoapPrimitive) obj;
                            if(j.toString()!=null)
                            {
                                this.SessionTimeout = j.toString();
                            }
                        }
                        else if (obj instanceof String){
                            this.SessionTimeout = (String)obj;
                        }
                    }
                    continue;
                }

            }

        }



    }

    @Override
    public Object getProperty(int propertyIndex) {
        int count = super.getPropertyCount();
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if(propertyIndex==count+0)
        {
            return this.Encoding!=null?this.Encoding.toString():SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+1)
        {
            return Resolution;
        }
        if(propertyIndex==count+2)
        {
            return Quality;
        }
        if(propertyIndex==count+3)
        {
            return this.RateControl!=null?this.RateControl:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+4)
        {
            return this.MPEG4!=null?this.MPEG4:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+5)
        {
            return this.H264!=null?this.H264:SoapPrimitive.NullSkip;
        }
        if(propertyIndex==count+6)
        {
            return Multicast;
        }
        if(propertyIndex==count+7)
        {
            return SessionTimeout;
        }
        return super.getProperty(propertyIndex);
    }


    @Override
    public int getPropertyCount() {
        return super.getPropertyCount()+8;
    }

    @Override
    public void getPropertyInfo(int propertyIndex, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info)
    {
        int count = super.getPropertyCount();
        if(propertyIndex==count+0)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "Encoding";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+1)
        {
            info.type = NTCVideoResolution.class;
            info.name = "Resolution";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+2)
        {
            info.type = Float.class;
            info.name = "Quality";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+3)
        {
            info.type = NTCVideoRateControl.class;
            info.name = "RateControl";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+4)
        {
            info.type = NTCMpeg4Configuration.class;
            info.name = "MPEG4";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+5)
        {
            info.type = NTCH264Configuration.class;
            info.name = "H264";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+6)
        {
            info.type = NTCMulticastConfiguration.class;
            info.name = "Multicast";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        if(propertyIndex==count+7)
        {
            info.type = PropertyInfo.STRING_CLASS;
            info.name = "SessionTimeout";
            info.namespace= "http://www.onvif.org/ver10/schema";
        }
        super.getPropertyInfo(propertyIndex,arg1,info);
    }
    
    @Override
    public void setProperty(int arg0, Object arg1)
    {
    }

    
}

